{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Student 3000 Criminal Data\"\nauthor: \"coop711\"\ndate: \"2015년 10월 7일\"\noutput: html_document\n---\n\n## Structure of Data\n\n\n### Data Manipulation\n\n* W. S. Gosset 이 t-분포를 유도하느라고 모의실험에 활용한 자료는 다음과 같음.\n    + `table`은 본질적으로 `matrix`임. 행과 열의 이름에 측정값을 글자로 새겨 넣었기 때문에  long format으로 변환할 때 많은 주의가 필요함.\n\n```{r}\n# options(width=132)\ncrimtab\nstr(crimtab)\n```\n\n* 이러한 table 구조의 행과 열에 이름을 붙이려면, `list`로 부여\n    + cm 단위로 되어 있는 키의 계급을 인치 단위로 변환하면 숨어있던 자료구조다 드러남.\n```{r}\ndimnames(crimtab)\ncrimtab.2 <- crimtab\ncolnames(crimtab.2) <- as.numeric(colnames(crimtab.2))/2.54\n(dimnames(crimtab.2) <- list(finger = rownames(crimtab.2), height = colnames(crimtab.2)))\ncrimtab.2\nstr(crimtab.2)\n```\n\n* long format 으로 변환\n    + 1차적으로 각 손가락 길이와 키의 조합을 갖는 인원수로 구성된 data frame으로 변환하고, case 단위의 long format data frame으로 2단계 변환 \n    + `as.data.frame()` 에서 `stringsAsFactors = FALSE`가 매우 중요한 역할을 하는 것임. 이 옵션을 설정하지 않을 경우 `Factor`로 잡히면 `numeric`으로 전환할 수 없게 됨. `Factor`는 본질적으로 음이 아닌 정수로 취급됨.\n    + 보통 이 설정은 `stringsAsFactors = default.stringsAsFactors()`가 default 설정으로 되어 있고, 따라서 `default.stringsAsFactors() = ` `r default.stringsAsFactors()` 에 따라 설정을 바꿔주면 되어야 하나 써 있는 대로 되지 않는 경우가 있어서 가능한 설정해주는 것이 안전함.\n    + 단순히 `data.frame()`으로 변환할 경우 `Factor`로 설정되어`numeric`으로 변환하더라도 의미없는 숫자를 얻게 됨. \n    + `as.data.frame()`의 결과물로 두 개의 character vector 와 counts를 나타내는 새로운 변수 `Freq`가 나오게 됨. 손가락 길이와 키를 나타내는 character를 numeric으로 전환하고 다음 작업 진행.\n    \n```{r}\ncrimtab.2.df <- as.data.frame(crimtab.2, stringsAsFactors = FALSE)\nstr(crimtab.2.df)\ncrimtab.2.df[1:2] <- sapply(crimtab.2.df[1:2], as.numeric)\nstr(crimtab.2.df)\ncrimtab.2.long <- mapply(function(x) rep(x, crimtab.2.df$Freq), crimtab.2.df[c(\"finger\", \"height\")])\n# crimtab.2.long <- mapply(function(x, y) rep(x, y = crimtab.2.df$Freq), crimtab.2.df[c(\"finger\", \"height\")])\n# crimtab.2.long <- mapply(function(x, y) rep(x, y), y = crimtab.2.df$Freq, crimtab.2.df[c(\"finger\", \"height\")])\n# crimtab.2.long <- mapply(function(x) rep(x, crimtab.2.df$Freq), crimtab.2.df[, c(\"finger\", \"height\")])\n# crimtab.2.long <- mapply(function(x) rep(x, crimtab.2.df$Freq), crimtab.2.df[1:2])\n# crimtab.2.long <- mapply(function(x) rep(x, crimtab.2.df$Freq), crimtab.2.df[, 1:2])\n# crimtab.2.long <- mapply(function(x) rep(x, crimtab.2.df$Freq), crimtab.2.df[, 2])\n# crimtab.2.long <- mapply(function(x) rep(x, crimtab.2.df$Freq), crimtab.2.df$height)\nstr(crimtab.2.long)\ncrimtab.2.long.df <- data.frame(crimtab.2.long)\nstr(crimtab.2.long.df)\n```\n\n## Graphic Representation\n\n### Base Graphics\n\n* 키와 손가락길이의 산점도 \n\n```{r}\nplot(finger ~ height, data = crimtab.2.long.df)\n```\n\n* 변수 각각의 히스토그램은?\n\n```{r fig.width=8, fig.height=4}\npar(mfrow=c(1,2))\nhist(crimtab.2.long.df$height, main=\"Histogram of Height\", xlab=\"height(inches)\")\nhist(crimtab.2.long.df$finger, main=\"Histogram of Finger Length\", xlab= \"finger length(cm)\")\n# hist(crimtab.2.long.df[\"height\"], main=\"Histogram of Height\", xlab=\"height(inches)\")\n# hist(crimtab.2.long.df[\"finger\"], main=\"Histogram of Finger Length\", xlab= \"finger length(cm)\")\n```\n\n* 평균과 표준편차를 한번에 구하려면 다음과 같이 anonymous function을 작성하고 `mapply()`를 이용하는 게 편함. 이를 모수로 하는 정규곡선을 덧씌워 볼 것.\n    + `mean.sd()`도 anonymous function 으로 평균과 표준편차를 계산해서 출력하는 함수임. 이와 같은 함수를 저장해 놓으려면 `dump()`를 이용함.\n    + 이와 같이 계산한 평균과 표준편차를 모수로 하는 정규곡선을 덧씌워 볼 것.\n```{r}\nmean.sd <- function(x) {\n  mean <- mean(x, na.rm = TRUE)\n  sd <- sd(x)\n  list(mean = mean, sd = sd)\n}\n(crimtab.stat <- mapply(mean.sd, crimtab.2.long.df))\nstr(crimtab.stat)\n# apply(crimtab.2.long, 2, mean)\n# apply(crimtab.2.long, 2, sd)\ndump(\"mean.sd\", file=\"mean_sd.R\")\n```\n\n* `crimtab.stat`이 어떤 성격을 갖는지 다음 질문과 추출 작업을 통해서 알아보자.\n\n```{r}\nis.matrix(crimtab.stat)\nis.table(crimtab.stat)\nis.list(crimtab.stat)\nis.data.frame(crimtab.stat)\ncrimtab.stat[, 1]\ncrimtab.stat[, \"finger\"]\ncrimtab.stat[, \"finger\"][1]\ncrimtab.stat[, \"finger\"][[1]]\ncrimtab.stat[1]\ncrimtab.stat[\"finger\"]\ncrimtab.stat$finger\n(crimtab.stat.df <- data.frame(crimtab.stat))\nis.matrix(crimtab.stat.df)\nis.table(crimtab.stat.df)\nis.list(crimtab.stat.df)\nis.data.frame(crimtab.stat.df)\ncrimtab.stat.df[, 1]\nstr(crimtab.stat.df[, 1])\ncrimtab.stat.df[, \"finger\"]\nstr(crimtab.stat.df[, \"finger\"])\ncrimtab.stat.df[, \"finger\"][1]\nstr(crimtab.stat.df[, \"finger\"][1])\ncrimtab.stat.df[, \"finger\"][[1]]\nstr(crimtab.stat.df[, \"finger\"][[1]])\ncrimtab.stat.df[1]\nstr(crimtab.stat.df[1])\ncrimtab.stat.df[\"finger\"]\nstr(crimtab.stat.df[\"finger\"])\ncrimtab.stat.df[\"finger\"][1]\nstr(crimtab.stat.df[\"finger\"][1])\ncrimtab.stat.df[\"finger\"][[1]]\nstr(crimtab.stat.df[\"finger\"][[1]])\ncrimtab.stat.df$finger\nstr(crimtab.stat.df$finger)\ncrimtab.stat.df$finger[1]\nstr(crimtab.stat.df$finger[1])\ncrimtab.stat.df$finger[[1]]\nstr(crimtab.stat.df$finger[[1]])\n```\n\n### ggplot\n\n* 키와 손가락 길이의 산점도  \n\n```{r, fig.width = 8, fig.height = 4}\nlibrary(ggplot2)\nggplot(crimtab.2.long.df, aes(x = height, y = finger)) + geom_point()\nggplot(crimtab.2.long.df, aes(x = height, y = finger)) + geom_point(alpha = 0.9)\nggplot(crimtab.2.long.df, aes(x = height, y = finger)) + geom_point(alpha = 0.5)\nggplot(crimtab.2.long.df, aes(x = height, y = finger)) + geom_point(alpha = 0.1)\nggplot(crimtab.2.long.df, aes(x = height, y = finger)) + geom_point(position = \"jitter\")\nggplot(crimtab.2.long.df, aes(x = height, y = finger)) + geom_point(position = \"jitter\", size = 0.7)\nggplot(crimtab.2.long.df, aes(x = height, y = finger)) + geom_point(position = position_jitter(), size = 0.7)\nggplot(crimtab.2.long.df, aes(x = height, y = finger)) + geom_point(position = position_jitter(width = 1, height = 0), size = 0.7)\nggplot(crimtab.2.long.df, aes(x = height, y = finger)) + geom_point(position = position_jitter(width = 1, height = 0.1), size = 0.7)\nggplot(crimtab.2.long.df, aes(x = height, y = finger)) + geom_point(position = position_jitter(width = 1, height = 0.1), size = 0.7) +\n  theme_bw()\n```\n\n* 변수 각각의 히스토그램\n\n```{r, fig.width = 8, fig.height=4}\nggplot(crimtab.2.long.df, aes(x = height)) + geom_histogram(alpha=0.5)\nggplot(crimtab.2.long.df, aes(x = finger)) + geom_histogram(alpha=0.5)\nggplot(crimtab.2.long.df, aes(x = height)) + geom_histogram(aes(y = ..density..), binwidth=1, alpha=0.5)\nggplot(crimtab.2.long.df, aes(x = finger)) + geom_histogram(aes(y = ..density..), binwidth=0.1, alpha=0.5)\n(g.h.1 <- ggplot(crimtab.2.long.df, aes(x = height)) + geom_histogram(aes(y = ..density..), binwidth = 1, fill = \"white\", colour = \"black\"))\n(g.f.1 <- ggplot(crimtab.2.long.df, aes(x = finger)) + geom_histogram(aes(y = ..density..), binwidth = 0.2, fill = \"white\", colour = \"black\"))\n```\n\n* `breaks` 설정의 필요성\n    + default 로 그린 히스토그램에 평균과 표준편차를 위치시켜보면, Quetelet의 가슴둘레 자료를 히스토그램으로 표현할 때와 같이 0.5만큼 치우친 것을 알 수 있음.\n    + 따라서 `geom_histogram`의 원형인 `stat_bin`에 `breaks=`를 재설정할 필요.\n    \n```{r, fig.width = 8, fig.height = 4}\nlibrary(grid)\n(mean.finger <- crimtab.stat[, 1][[1]])\n(sd.finger <- crimtab.stat[, 1][[2]])\n(mean.height <- crimtab.stat[, 2][[1]])\n(sd.height <- crimtab.stat[, 2][[2]])\nx.finger <- seq(9.5, 13.5, length.out = 3000)\ny.finger <- dnorm(x.finger, mean = mean.finger, sd = sd.finger)\nx.height <- seq(56, 77, length.out = 3000)\ny.height <- dnorm(x.height, mean = mean.height, sd = sd.height)\n(g.h.2 <- g.h.1 + annotate(\"segment\", x = mean.height, xend = mean.height, y= -0.02, yend = 0, arrow = arrow(length=unit(0.3, \"cm\"))))\n(g.h.3 <- g.h.2 + theme_bw())\n(g.h.4 <- g.h.3 + geom_line(aes(x = x.height, y = y.height)))\n(g.h.5 <- ggplot(crimtab.2.long.df, aes(x = height)) + stat_bin(aes(y = ..density..), binwidth = 1, breaks = 55.5:77.5, fill = \"white\", colour=\"black\"))\n(g.h.6 <- g.h.5 + annotate(\"segment\", x = mean.height, xend = mean.height, y= -0.02, yend = 0, arrow = arrow(length = unit(0.3, \"cm\"))))\n(g.h.7 <- g.h.6 + theme_bw())\n(g.h.8 <- g.h.7 + geom_line(aes(x = x.height, y = y.height)))\n(g.f.1 <- ggplot(crimtab.2.long.df, aes(x = finger)) + geom_histogram(aes(y = ..density..), binwidth = 0.2, fill = \"white\", colour = \"black\"))\n(g.f.2 <- g.f.1 + annotate(\"segment\", x = mean.finger, xend = mean.finger, y= -0.1, yend = 0, arrow = arrow(length = unit(0.3, \"cm\"))))\n(g.f.3 <- g.f.2 + theme_bw())\n(g.f.4 <- g.f.3 + geom_line(aes(x = x.finger, y = y.finger)))\n(g.f.5 <- ggplot(crimtab.2.long.df, aes(x = finger)) + stat_bin(aes(y = ..density..), breaks = seq(9.45, 13.55, by=0.2), fill = \"white\", colour=\"black\"))\n(g.f.6 <- g.f.5 + annotate(\"segment\", x=mean.finger, xend = mean.finger, y=-0.1, yend=0, arrow=arrow(length=unit(0.3, \"cm\"))))\n(g.f.7 <- g.f.6 + theme_bw())\n(g.f.8 <- g.f.7 + geom_line(aes(x=x.finger, y=y.finger)))\n```\n\n### Data 갈무리\n\n```{r}\nsave.image(file=\"../R/crimtab_1007.rda\")\n# cor(crimtab.2.long[,1], crimtab.2.long[,2])\n```",
    "created" : 1448945537219.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2986002620",
    "id" : "EA2D14F0",
    "lastKnownWriteTime" : 1448945540,
    "path" : "~/Desktop/Works/Class/Stat_Graphics/R.WD/Student_Gosset/R/crimtab_1007.Rmd",
    "project_path" : "R/crimtab_1007.Rmd",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}