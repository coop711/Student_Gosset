{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Student 3000 Criminal Data\"\nauthor: \"coop711\"\ndate: \"2015년 10월 7일\"\noutput: html_document\n---\n\n### Working Data Loading\n\n```{r, data loading}\n# options(width=132)\nload(\"./crimtab.rda\")\n# str(crimtab.long.df)\n```\n\n## Graphic Representation\n\n### Base Graphics\n\n* 키와 손가락길이의 산점도 \n\n```{r, scatter diagram, fig.width = 7, fig.height = 7}\n# plot(finger ~ height, data = crimtab.long.df)\nplot(crimtab.long.df)\n```\n\n* 변수 각각의 히스토그램은?\n\n```{r, histograms for each, fig.width = 12, fig.height = 4}\npar(mfrow = c(1, 2))\nhist(crimtab.long.df$height, main=\"Histogram of Height\", xlab=\"height(inches)\")\nhist(crimtab.long.df$finger, main=\"Histogram of Finger Length\", xlab= \"finger length(cm)\")\n# hist(crimtab.long.df[\"height\"], main=\"Histogram of Height\", xlab=\"height(inches)\")\n# hist(crimtab.long.df[\"finger\"], main=\"Histogram of Finger Length\", xlab= \"finger length(cm)\")\n```\n\n* 평균과 표준편차를 한번에 구하려면 다음과 같이 anonymous function을 작성하고 `mapply()` 또는 `sapply()`를 이용하는 게 편함. 이를 모수로 하는 정규곡선을 덧씌워 볼 것.\n    + `mean_sd()`도 `anonymous function` 으로 평균과 표준편차를 계산해서 출력하는 함수임. 이와 같은 함수를 저장해 놓으려면 `dump()`를 이용함.\n    + 이와 같이 계산한 평균과 표준편차를 모수로 하는 정규곡선을 덧씌워 볼 것.\n    \n```{r, mean_sd}\nmean_sd <- function(x) {\n  mean <- mean(x, na.rm = TRUE)\n  sd <- sd(x)\n  list(mean = mean, sd = sd)\n}\ndump(\"mean_sd\", file = \"mean_sd.R\")\n```\n\n```{r, crimtab.stat}\ncrimtab.stat <- mapply(mean_sd, crimtab.long.df)\n# crimtab.stat <- sapply(crimtab.long.df, mean_sd)\n# apply(crimtab.long, 2, mean)\n# apply(crimtab.long, 2, sd)\nstr(crimtab.stat)\n```\n\n* `crimtab.stat`이 어떤 성격을 갖는지 다음 질문과 추출 작업을 통해서 알아보자.\n\n```{r, exercises}\nis.matrix(crimtab.stat)\nis.table(crimtab.stat)\nis.list(crimtab.stat)\nis.data.frame(crimtab.stat)\ncrimtab.stat[, 1]\ncrimtab.stat[, \"finger\"]\ncrimtab.stat[, \"finger\"][1]\ncrimtab.stat[, \"finger\"][[1]]\ncrimtab.stat[1]\ncrimtab.stat[\"finger\"]\ncrimtab.stat$finger\n(crimtab.stat.df <- data.frame(crimtab.stat))\nis.matrix(crimtab.stat.df)\nis.table(crimtab.stat.df)\nis.list(crimtab.stat.df)\nis.data.frame(crimtab.stat.df)\ncrimtab.stat.df[, 1]\nstr(crimtab.stat.df[, 1])\ncrimtab.stat.df[, \"finger\"]\nstr(crimtab.stat.df[, \"finger\"])\ncrimtab.stat.df[, \"finger\"][1]\nstr(crimtab.stat.df[, \"finger\"][1])\ncrimtab.stat.df[, \"finger\"][[1]]\nstr(crimtab.stat.df[, \"finger\"][[1]])\ncrimtab.stat.df[1]\nstr(crimtab.stat.df[1])\ncrimtab.stat.df[\"finger\"]\nstr(crimtab.stat.df[\"finger\"])\ncrimtab.stat.df[\"finger\"][1]\nstr(crimtab.stat.df[\"finger\"][1])\ncrimtab.stat.df[\"finger\"][[1]]\nstr(crimtab.stat.df[\"finger\"][[1]])\ncrimtab.stat.df$finger\nstr(crimtab.stat.df$finger)\ncrimtab.stat.df$finger[1]\nstr(crimtab.stat.df$finger[1])\ncrimtab.stat.df$finger[[1]]\nstr(crimtab.stat.df$finger[[1]])\n```\n\n### ggplot\n\n* 키와 손가락 길이의 산점도  \n\n```{r, fig.width = 8, fig.height = 4}\nlibrary(ggplot2)\ng1 <- ggplot(crimtab.long.df, aes(x = height, y = finger)) \ng1 + geom_point()\ng1 + geom_point(alpha = 0.9)\ng1 + geom_point(alpha = 0.5)\ng1 + geom_point(alpha = 0.1)\ng1 + geom_point(position = \"jitter\")\ng1 + geom_point(position = \"jitter\", size = 0.7)\ng1 + geom_point(position = position_jitter(), size = 0.7)\ng1 + geom_point(position = position_jitter(width = 1, height = 0), size = 0.7)\ng1 + geom_point(position = position_jitter(width = 1, height = 0.1), size = 0.7)\ng1 + geom_point(position = position_jitter(width = 1, height = 0.1), size = 0.7) + theme_bw()\n```\n\n* 변수 각각의 히스토그램\n\n```{r, fig.width = 8, fig.height=4}\nh1 <- ggplot(crimtab.long.df, aes(x = height)) \nh1 + geom_histogram(alpha = 0.5)\nf1 <- ggplot(crimtab.long.df, aes(x = finger))\nf1 + geom_histogram(alpha = 0.5)\nh1 + geom_histogram(aes(y = ..density..), binwidth = 1, alpha = 0.5)\nf1 + geom_histogram(aes(y = ..density..), binwidth = 0.1, alpha = 0.5)\n(g.h.1 <- h1 + geom_histogram(aes(y = ..density..), binwidth = 1, fill = \"white\", colour = \"black\"))\n(g.f.1 <- f1 + geom_histogram(aes(y = ..density..), binwidth = 0.2, fill = \"white\", colour = \"black\"))\n```\n\n* `breaks` 설정의 필요성\n    + default 로 그린 히스토그램에 평균과 표준편차를 위치시켜보면, Quetelet의 가슴둘레 자료를 히스토그램으로 표현할 때와 같이 0.5만큼 치우친 것을 알 수 있음.\n    + 따라서 `geom_histogram`의 원형인 `stat_bin`에 `breaks=`를 재설정할 필요.\n    \n```{r, fig.width = 8, fig.height = 4}\nlibrary(grid)\n(mean.finger <- crimtab.stat[, 1][[1]])\n(sd.finger <- crimtab.stat[, 1][[2]])\n(mean.height <- crimtab.stat[, 2][[1]])\n(sd.height <- crimtab.stat[, 2][[2]])\nx.finger <- seq(9.5, 13.5, length.out = 3000)\ny.finger <- dnorm(x.finger, mean = mean.finger, sd = sd.finger)\nx.height <- seq(56, 77, length.out = 3000)\ny.height <- dnorm(x.height, mean = mean.height, sd = sd.height)\n(g.h.2 <- g.h.1 + annotate(\"segment\", x = mean.height, xend = mean.height, y= -0.02, yend = 0, arrow = arrow(length = unit(0.3, \"cm\"))))\n(g.h.3 <- g.h.2 + theme_bw())\n(g.h.4 <- g.h.3 + geom_line(aes(x = x.height, y = y.height)))\n(g.h.5 <- ggplot(crimtab.long.df, aes(x = height)) + stat_bin(aes(y = ..density..), binwidth = 1, breaks = 55.5:77.5, fill = \"white\", colour=\"black\"))\n(g.h.6 <- g.h.5 + annotate(\"segment\", x = mean.height, xend = mean.height, y= -0.02, yend = 0, arrow = arrow(length = unit(0.3, \"cm\"))))\n(g.h.7 <- g.h.6 + theme_bw())\n(g.h.8 <- g.h.7 + geom_line(aes(x = x.height, y = y.height)))\n(g.f.1 <- ggplot(crimtab.long.df, aes(x = finger)) + geom_histogram(aes(y = ..density..), binwidth = 0.2, fill = \"white\", colour = \"black\"))\n(g.f.2 <- g.f.1 + annotate(\"segment\", x = mean.finger, xend = mean.finger, y= -0.1, yend = 0, arrow = arrow(length = unit(0.3, \"cm\"))))\n(g.f.3 <- g.f.2 + theme_bw())\n(g.f.4 <- g.f.3 + geom_line(aes(x = x.finger, y = y.finger)))\n(g.f.5 <- ggplot(crimtab.long.df, aes(x = finger)) + stat_bin(aes(y = ..density..), breaks = seq(9.45, 13.55, by = 0.2), fill = \"white\", colour = \"black\"))\n(g.f.6 <- g.f.5 + annotate(\"segment\", x = mean.finger, xend = mean.finger, y = -0.1, yend = 0, arrow = arrow(length = unit(0.3, \"cm\"))))\n(g.f.7 <- g.f.6 + theme_bw())\n(g.f.8 <- g.f.7 + geom_line(aes(x = x.finger, y = y.finger)))\n```\n\n### Data 갈무리\n\n```{r, save}\nsave.image(file=\"./crimtab_ggplot.rda\")\n# cor(crimtab.2.long[,1], crimtab.2.long[,2])\n```",
    "created" : 1448945537219.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "336307579",
    "id" : "EA2D14F0",
    "lastKnownWriteTime" : 1464614901,
    "last_content_update" : 1464614901903,
    "path" : "~/Google 드라이브/Works/Class/Stat_Graphics/R.WD/Student_Gosset/R/crimtab_ggplots.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}